version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9091,PLAINTEXT_HOST://localhost:9092,PLAINTEXT_KAFKA_HOST://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_KAFKA_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
#      TZ: UTC
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: kafka_db
      MYSQL_ROOT_HOST: '%'
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-time-zone=UTC
    ports:
      - '3306:3306'
    volumes:
      - mysql:/var/lib/mysql
  publisher:
    depends_on:
      - mysql
      - kafka
    container_name: publisher
    build:
      dockerfile: Dockerfile-without_MVN
    image: sb_kafka_pub:latest
    ports:
      - '8081:8081'
    environment:
      SPRING_PROFILES_ACTIVE: Publisher, docker
  consumer:
    depends_on:
      - mysql
      - kafka
    container_name: consumer
    build:
      dockerfile: Dockerfile-without_MVN
    image: sb_kafka_cons:latest
    ports:
      - '8082:8082'
    environment:
      SPRING_PROFILES_ACTIVE: Consumer, docker
  hibernate:
    depends_on:
      - mysql
    container_name: hibernate
    build:
      dockerfile: Dockerfile-without_MVN
    image: sb_hibernate:latest
    ports:
      - '8083:8083'
    environment:
      SPRING_PROFILES_ACTIVE: Hibernate, docker
#    networks:
#      - spring-cloud-network
#networks:
#  spring-cloud-network:
#    driver: bridge
volumes:
  mysql:
    driver: local
